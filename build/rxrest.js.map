{"version":3,"file":"rxrest.js","sources":["../src/RxRestProxyHandler.ts","../src/RxRestConfiguration.ts","../src/fetch.ts","../src/RxRest.ts","../src/index.ts"],"sourcesContent":["import {RxRestCollection, RxRestItem} from './index'\nimport {RxRest} from './RxRest'\n\nexport class RxRestProxyHandler<T> implements ProxyHandler<RxRest<T>> {\n  private $internal: PropertyKey[] = [];\n  private $instance: RxRestItem<T> | RxRestCollection<T>;\n\n  constructor(target: RxRestItem<T> | RxRestCollection<T>) {\n    this.$instance = target\n    do {\n      this.$internal = this.$internal.concat(\n        Object.getOwnPropertyNames(target), Object.getOwnPropertySymbols(target)\n      )\n    } while (target = Object.getPrototypeOf(target))\n  }\n\n  getPrototypeOf(target: any) {\n    return Object.getPrototypeOf(this.$instance)\n  }\n\n  defineProperty(target: any, p: PropertyKey, attributes: PropertyDescriptor): boolean {\n    if (~this.$internal.indexOf(p)) {\n      return true\n    }\n\n    Object.defineProperty(target, p, attributes)\n    return true\n  }\n\n  deleteProperty(target: any, p: PropertyKey): boolean {\n    return delete target[p]\n  }\n\n  set(target: any, p: PropertyKey, value: any, receiver: any): boolean {\n\n    if (~this.$internal.indexOf(p)) {\n      this.$instance[p] = value\n      return true\n    }\n\n    target[p] = value\n    return true\n  }\n\n  get(target: any, p: PropertyKey, receiver: any): any {\n    if (~this.$internal.indexOf(p)) {\n      return this.$instance[p]\n    }\n\n    return target[p]\n  }\n}\n","import {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor\n} from './interfaces'\nimport {RxRestItem} from './index'\n\n/**\n * RxRestConfiguration\n */\nexport class RxRestConfiguration {\n  baseURL: string\n  identifier: string = 'id'\n  requestInterceptors: RequestInterceptor[] = []\n  responseInterceptors: ResponseInterceptor[] = []\n  errorInterceptors: ErrorInterceptor[] = []\n  headers: Headers = new Headers()\n  queryParams: URLSearchParams = new URLSearchParams()\n  fetch: any\n  abortCallback: (req: Request) => void = () => null\n\n  /**\n   * requestBodyHandler\n   * JSONify the body if it's an `RxRestItem` or an `Object`\n   *\n   * @param {FormData|URLSearchParams|Body|Blob|undefined} body\n   * @returns {any}\n   */\n  requestBodyHandler(body: FormData|URLSearchParams|Body|Blob|undefined):\n    FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any> {\n    if (!body) {\n      return undefined\n    }\n\n    if (body instanceof FormData || body instanceof URLSearchParams) {\n      return body\n    }\n\n    return body instanceof RxRestItem ? body.json() : JSON.stringify(body)\n  }\n\n  /**\n   * responseBodyHandler\n   * transforms the response to a json object\n   *\n   * @param {Response} body\n   * @reject when response is an error\n   * @returns {Promise<any>}\n   */\n  responseBodyHandler(body: Response): Promise<any> {\n    return body.text()\n    .then(text => {\n      return text ? JSON.parse(text) : null\n    })\n  }\n}\n","import { RequestOptions, ErrorResponse, RequestWithHeaders } from './interfaces'\nimport superagent from 'superagent'\nimport {Stream, fromPromise} from 'most'\nimport {create} from '@most/create'\n\nexport function fetch(\n  input: string|RequestWithHeaders,\n  init?: RequestOptions,\n  abortCallback?: (req: Request) => void\n): Stream<any> {\n\n  if (!(input instanceof Request)) {\n    input = new Request(input, init) as RequestWithHeaders\n  }\n\n  let req = superagent[input.method.toLowerCase()](input.url)\n\n  for (let header of input.headers) {\n    req.set(header[0], header[1])\n  }\n\n  return fromPromise(input.text())\n  .flatMap(body => {\n    req.send(body)\n\n    return create((add, end, error) => {\n      req.end(function(err: any, res: any) {\n        if (err) {\n          let response = new Response(err, res) as ErrorResponse\n          response.message = response.statusText\n          return error(response)\n        }\n\n        if (res.noContent === true) {\n          add(new Response())\n          return end()\n        }\n\n        let response = new Response(res.text, res)\n\n        add(response)\n        end()\n      })\n\n      return function abort() {\n        req.abort()\n        abortCallback(req)\n      }\n    })\n  })\n}\n","import { RxRestConfiguration } from './RxRestConfiguration'\nimport {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor,\n  ErrorResponse\n} from './interfaces';\nimport { RxRestCollection, RxRestItem, BodyParam } from './index'\nimport { fetch as superAgentFetch } from './fetch'\nimport { Stream, throwError, of } from 'most'\nimport { create } from '@most/create'\n\nexport interface RequestBodyHandler<T> {\n  (body: BodyParam<T>): FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any>\n}\n\nexport interface ResponseBodyHandler {\n  (body: Response): Promise<any>\n}\n\nconst fromPromise = function(promise: Promise<any>) {\n  return create((add, end, error) => {\n    promise\n    .then((v) => {\n      add(v)\n      end()\n    })\n    .catch(error)\n  })\n}\n\nfunction objectToMap(map: URLSearchParams | Headers, item: any): any {\n  for (let key in item) {\n    if (Array.isArray(item[key])) {\n      for (let i = 0; i < item[key].length; i++) {\n        map.append(key, item[key][i])\n      }\n    } else {\n      map.append(key, item[key])\n    }\n  }\n\n  return map\n}\n\nconst Config = new RxRestConfiguration()\n\nexport class RxRest<T> {\n  protected $route: string[]\n  $fromServer: boolean = false\n  $queryParams: URLSearchParams = new URLSearchParams()\n  $headers: Headers = new Headers()\n\n  /**\n   * constructor\n   *\n   * @param {String} [route] the resource route\n   */\n  constructor(route?: string[]) {\n    this.$route = route === undefined ? [] : [...route]\n  }\n\n  protected addRoute(route: string): void {\n    this.$route.push.apply(this.$route, route.split('/'))\n  }\n\n  /**\n   * one\n   *\n   * @param {String} route\n   * @param {any} id\n   * @returns {RxRestItem}\n   */\n  one<T>(route: string, id?: any): RxRestItem<T> {\n    this.addRoute(route)\n    let o = {} as T\n    if (id) {\n      o[this.identifier] = id\n    }\n\n    return new RxRestItem<T>(this.$route, o)\n  }\n\n  /**\n   * all\n   *\n   * @param {String} route\n   * @returns {RxRestCollection}\n   */\n  all<T>(route: string): RxRestCollection<T> {\n    this.addRoute(route)\n    return new RxRestCollection<T>(this.$route)\n  }\n\n  /**\n   * fromObject\n   *\n   * @param {String} route\n   * @param {Object|Object[]} element\n   * @returns {RxRestItem|RxRestCollection}\n   */\n  fromObject<T>(route: string, element: T|T[]): RxRestItem<T>|RxRestCollection<T> {\n    this.addRoute(route)\n    return Array.isArray(element) ?\n      new RxRestCollection<T>(this.$route, element) : new RxRestItem<T>(this.$route, element);\n  }\n\n  /**\n   * @access private\n   * @param {BodyParam} body\n   * @return {BodyParam|RxRestItem}\n   */\n  protected withBody(body: BodyParam<T>) {\n    return body ? body : this\n  }\n\n  /**\n   * post\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  post(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('POST', this.withBody(body))\n  }\n\n  /**\n   * remove\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  remove(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('DELETE')\n  }\n\n  /**\n   * get\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  get(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * put\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  put(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('PUT', this.withBody(body))\n  }\n\n  /**\n   * patch\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  patch(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('PATCH', this.withBody(body))\n  }\n\n  /**\n   * head\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  head(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('HEAD')\n  }\n\n  /**\n   * trace\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  trace(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('TRACE')\n  }\n\n  /**\n   * options\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  options(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('OPTIONS')\n  }\n\n  /**\n   * URL\n   *\n   * @returns {string}\n   */\n  get URL(): string {\n    return `${Config.baseURL}${this.$route.join('/')}`\n  }\n\n  /**\n   * set baseURL\n   *\n   * @param {String} base\n   * @returns\n   */\n  set baseURL(base: string) {\n    if (base.charAt(base.length - 1) !== '/') {\n      base += '/'\n    }\n\n    Config.baseURL = base\n  }\n\n  /**\n   * get baseURL\n   *\n   * @returns {string}\n   */\n  get baseURL(): string {\n    return Config.baseURL\n  }\n\n  /**\n   * Set identifier key\n   *\n   * @param {String} id\n   */\n  set identifier(id: string) {\n    Config.identifier = id\n  }\n\n  /**\n   * Get identifier key\n   */\n  get identifier(): string {\n    return Config.identifier\n  }\n\n  /**\n   * set local query params\n   * @param {Object|URLSearchParams} params\n   */\n  set localQueryParams(params: any) {\n    if (!params) {\n      return\n    }\n\n    if (params instanceof URLSearchParams) {\n      this.$queryParams = params\n      return\n    }\n\n    this.$queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Sets local query params useful to add params to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setQueryParams(params: any): RxRest<T> {\n    this.localQueryParams = params\n    return this\n  }\n\n  /**\n   * Sets local headers useful to add headers to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setHeaders(params: any): RxRest<T> {\n    this.localHeaders = params\n    return this\n  }\n\n  /**\n   * Get local query params\n   * @return URLSearchParams\n   */\n  get localQueryParams(): any {\n    return this.$queryParams\n  }\n\n  /**\n   * Set global query params\n   * @param {Object|URLSearchParams} params\n   */\n  set queryParams(params: any) {\n    if (params instanceof URLSearchParams) {\n      Config.queryParams = params\n      return\n    }\n\n    if (typeof params === 'string') {\n      Config.queryParams = new URLSearchParams(params)\n      return\n    }\n\n    Config.queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Get global query params\n   * @return {URLSearchParams}\n   */\n  get queryParams(): any {\n    return Config.queryParams\n  }\n\n  /**\n   * Get request query params\n   * Combine local and global query params\n   * Local query params are overriding global params\n   * @return {String}\n   */\n  get requestQueryParams(): string {\n    let params = new URLSearchParams()\n\n    for (let param of this.queryParams) {\n      params.append(param[0], param[1])\n    }\n\n    for (let param of this.localQueryParams) {\n      params.append(param[0], param[1])\n    }\n\n    let str = params.toString()\n\n    if (str.length) {\n      return '?' + str\n    }\n\n    return ''\n  }\n\n  /**\n   * Set local headers\n   * @param {Object|Headers} params\n   */\n  set localHeaders(params: any) {\n    if (!params) {\n      return\n    }\n\n     if (params instanceof Headers) {\n      this.$headers = params\n      return\n    }\n\n    this.$headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get local headers\n   * @return Headers\n   */\n  get localHeaders(): any {\n    return this.$headers\n  }\n\n  /**\n   * set global headers\n   * @param {Object|Headers} params\n   */\n  set headers(params: any) {\n     if (params instanceof Headers) {\n      Config.headers = params\n      return\n    }\n\n    Config.headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get global headers\n   * @return Headers\n   */\n  get headers(): any {\n    return Config.headers\n  }\n\n  /**\n   * get request Headers\n   * Combine local and global headers\n   * Local headers are overriding global headers\n   *\n   * @returns {Headers}\n   */\n  get requestHeaders(): Headers {\n    let headers = new Headers()\n\n    for (let header of this.headers) {\n      headers.append(header[0], header[1])\n    }\n\n    for (let header of this.localHeaders) {\n      headers.append(header[0], header[1])\n    }\n\n    return headers\n  }\n\n  /**\n   * get requestInterceptors\n   *\n   * @returns {RequestInterceptor[]}\n   */\n  get requestInterceptors(): RequestInterceptor[] {\n    return Config.requestInterceptors\n  }\n\n  /**\n   * set requestInterceptors\n   *\n   * @param {RequestInterceptor[]} requestInterceptors\n   */\n  set requestInterceptors(requestInterceptors: RequestInterceptor[]) {\n    Config.requestInterceptors = requestInterceptors\n  }\n\n  /**\n   * get responseInterceptors\n   *\n   * @returns {ResponseInterceptor[]}\n   */\n  get responseInterceptors(): ResponseInterceptor[] {\n    return Config.responseInterceptors\n  }\n\n  /**\n   * set responseInterceptors\n   *\n   * @param {ResponseInterceptor[]} responseInterceptor\n   */\n  set responseInterceptors(responseInterceptor: ResponseInterceptor[]) {\n    Config.responseInterceptors = responseInterceptor\n  }\n\n  /**\n   * get errorInterceptors\n   *\n   * @returns {ErrorInterceptor[]}\n   */\n  get errorInterceptors(): ErrorInterceptor[] {\n    return Config.errorInterceptors\n  }\n\n  /**\n   * set errorInterceptors\n   *\n   * @param {ErrorInterceptor[]} errorInterceptors\n   */\n  set errorInterceptors(errorInterceptors: ErrorInterceptor[]) {\n    Config.errorInterceptors = errorInterceptors\n  }\n\n  /**\n   * set requestBodyHandler\n   *\n   * @param {Function} fn\n   */\n  set requestBodyHandler(fn: RequestBodyHandler<T>) {\n    Config.requestBodyHandler = fn\n  }\n\n  /**\n   * requestBodyHandler\n   *\n   * @returns {Function}\n   */\n  get requestBodyHandler(): RequestBodyHandler<T> {\n    return Config.requestBodyHandler\n  }\n\n  /**\n   * set responseBodyHandler\n   * @param {ResponseBodyHandler} fn\n   */\n  set responseBodyHandler(fn: ResponseBodyHandler) {\n    Config.responseBodyHandler = fn\n  }\n\n  /**\n   * get responseBodyHandler\n   *\n   * @returns {ResponseBodyHandler}\n   */\n  get responseBodyHandler(): ResponseBodyHandler {\n    return Config.responseBodyHandler\n  }\n\n  /**\n   * @param fn the callback that will be called on request abortion\n   */\n  set abortCallback(fn: (req: Request) => void) {\n    Config.abortCallback = fn\n  }\n\n  /**\n   * @return fn the current cancel callback\n   */\n  get abortCallback(): (req: Request) => void {\n    return Config.abortCallback\n  }\n\n  get fetch(): any {\n    return Config.fetch ? Config.fetch : superAgentFetch\n  }\n\n  set fetch(fn: any) {\n    Config.fetch = fn\n  }\n\n  /**\n   * expandInterceptors\n   *\n   * @param {RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]} interceptors\n   * @returns {Stream<any>} fn\n   */\n  private expandInterceptors(\n    interceptors: RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]\n  ) {\n    return function(origin: any): Stream<any> {\n      return (<any>interceptors).reduce(\n        (obs: Stream<any>, interceptor: any) =>\n          obs.concatMap(value => {\n            let result = interceptor(value)\n            if (result === undefined) {\n              return of(value)\n            }\n\n            if (result instanceof Promise) {\n              return fromPromise(result)\n            }\n\n            if (result instanceof Stream) {\n              return result\n            }\n\n            return of(result)\n          }),\n        of(origin)\n      )\n    }\n  }\n\n  /**\n   * request\n   *\n   * @param {string} method\n   * @param {RxRestItem|FormData|URLSearchParams|Body|Blob|undefined|Object} [body]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  request(method: string, body?: BodyParam<T>): Stream<RxRestItem<T> & T> {\n    let requestOptions = {\n      method: method,\n      headers: <Headers> this.requestHeaders,\n      body: this.requestBodyHandler(body)\n    }\n\n    let request = new Request(this.URL + this.requestQueryParams, requestOptions);\n\n    let stream = <Stream<RxRestItem<T> & T>> of(request)\n    .flatMap(this.expandInterceptors(Config.requestInterceptors))\n    .flatMap(request => this.fetch(request, null, this.abortCallback))\n    .flatMap(this.expandInterceptors(Config.responseInterceptors))\n    .flatMap(body => fromPromise(this.responseBodyHandler(body)))\n    .flatMap(body => {\n      if (!Array.isArray(body)) {\n        let item: RxRestItem<T>\n        if (this instanceof RxRestItem) {\n          item = this\n          item.element = body as T\n        } else {\n          item = new RxRestItem(this.$route, body as T)\n        }\n\n        item.$fromServer = true\n        return create((add, end, error) => {\n          add(item)\n          end(item)\n        })\n      }\n\n      let collection = new RxRestCollection<T>(this.$route, body.map((e: T) => {\n        let item = new RxRestItem(this.$route, e)\n        item.$fromServer = true\n        return item\n      }))\n\n      return create((add, end, error) => {\n        for (let item of collection) {\n          add(item)\n        }\n\n        end(collection)\n      })\n    })\n    .recoverWith(body => {\n      return of(body)\n      .flatMap(this.expandInterceptors(Config.errorInterceptors))\n      .flatMap((body: ErrorResponse) => throwError(body))\n    })\n\n    return stream\n  }\n}\n","import { Stream } from 'most'\nimport { RxRestProxyHandler } from './RxRestProxyHandler'\nimport { RxRest } from './RxRest'\n\nexport type BodyParam<T> = RxRestItem<T>|FormData|URLSearchParams|Body|Blob|undefined|Object;\n\nexport class RxRestItem<T> extends RxRest<T> {\n  $element: T = {} as T;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T} [element]\n   * @return {Proxy}\n   */\n  constructor(route: string[], element?: T) {\n    super(route)\n\n    if (element !== undefined) {\n      this.element = element\n    }\n\n    const proxy = new Proxy(this.$element, new RxRestProxyHandler<T>(this))\n\n    return <RxRestItem<T> & T> proxy\n  }\n\n  /**\n   * save - POST or PUT according to $fromServer value\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  save(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request(this.$fromServer === true ? 'PUT' : 'POST', this)\n  }\n\n  /**\n   * set element\n   *\n   * @param {T} element\n   */\n  set element(element: T) {\n    for (let i in element) {\n      if (i === this.identifier && !this.$element[this.identifier]) {\n        this.$route.push('' + element[i])\n      }\n\n      this.$element[i] = element[i]\n    }\n  }\n\n  /**\n   * get element\n   *\n   * @return {T}\n   */\n  get element(): T {\n    return this.$element\n  }\n\n  /**\n   * get plain object\n   *\n   * @return {T}\n   */\n  plain(): T {\n    return this.element\n  }\n\n  /**\n   * Get json string\n   * @return {string}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * Clone\n   * @return {RxRestItem<T>}\n   */\n  clone(): RxRestItem<T> {\n    let route = this.$route\n\n    if (this.$element[this.identifier]) {\n      route = route.slice(0, this.$route.length - 1)\n    }\n\n    let clone = new RxRestItem(route, this.$element)\n    clone.$fromServer = this.$fromServer\n    return clone\n  }\n}\n\nexport class RxRestCollection<T> extends RxRest<T>\n  implements Iterable<RxRestItem<T>>, RxRestCollection<T> {\n  length: number;\n  $elements: RxRestItem<T>[] = [];\n  [index: number]: RxRestItem<T>;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T[]|RxRestItem<T>[]]} [elements]\n   * @return {Proxy}\n   */\n  constructor(route: string[], elements?: T[]|RxRestItem<T>[]) {\n    super(route)\n    if (elements !== undefined) {\n      this.elements = (elements as any).map((e: any) =>\n        e instanceof RxRestItem ? e.clone() : new RxRestItem(this.$route, e)\n      )\n    }\n\n    const proxy = new Proxy(this.$elements, new RxRestProxyHandler<T>(this))\n\n    return <RxRestCollection<T> & T> proxy\n  }\n\n  [Symbol.iterator]() {\n    let index = 0\n    let elements = this.$elements\n\n    return {\n      next(): IteratorResult<RxRestItem<T>> {\n        return index < elements.length ?\n          {value: elements[index++], done: false} : {value: undefined, done: true}\n      }\n    }\n  }\n\n  /**\n   * getList - fetch a collection\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  getList(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * set elements\n   *\n   * @param {T[]} elements\n   */\n  set elements(elements: RxRestItem<T>[]) {\n    this.$elements = elements\n    this.length = elements.length\n  }\n\n  /**\n   * get elements\n   * @return {RxRestItem<T>[]}\n   */\n  get elements(): RxRestItem<T>[] {\n    return this.$elements\n  }\n\n  /**\n   * plain\n   *\n   * @returns {T[]}\n   */\n  plain(): T[] {\n    return this.elements.map(e => e.plain())\n  }\n\n  /**\n   * json\n   *\n   * @returns {String}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * clone\n   *\n   * @returns {RxRestCollection}\n   */\n  clone(): RxRestCollection<T> {\n    return new RxRestCollection<T>(this.$route, this.$elements)\n  }\n}\n\nexport class NewRxRest {\n  one<T>(route: string, id?: any): RxRestItem<T> & T {\n    let r = new RxRest()\n    return r.one.call(r, route, id)\n  }\n\n  all<T>(route: string): RxRestCollection<T> & T {\n    let r = new RxRest()\n    return r.all.call(r, route)\n  }\n\n  fromObject<T>(route: string, element: T|T[]): (RxRestItem<T> & T) | (RxRestCollection<T> & T) {\n    let r = new RxRest()\n    return r.fromObject.call(r, route, element)\n  }\n}\n\nexport {RxRest}\n"],"names":["target","$instance","$internal","concat","Object","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","p","attributes","indexOf","defineProperty","value","receiver","Headers","URLSearchParams","body","undefined","FormData","RxRestItem","json","JSON","stringify","text","then","parse","input","init","abortCallback","Request","req","superagent","method","toLowerCase","url","headers","header","set","fromPromise","flatMap","send","create","add","end","error","err","res","response","Response","message","statusText","noContent","abort","promise","v","catch","map","item","key","Array","isArray","i","length","append","Config","RxRestConfiguration","route","$route","push","apply","split","id","addRoute","o","identifier","RxRestCollection","element","queryParams","localQueryParams","localHeaders","request","withBody","params","interceptors","origin","reduce","obs","interceptor","concatMap","result","of","Promise","Stream","requestOptions","requestHeaders","requestBodyHandler","URL","requestQueryParams","stream","expandInterceptors","requestInterceptors","fetch","responseInterceptors","responseBodyHandler","$fromServer","collection","e","recoverWith","errorInterceptors","throwError","baseURL","join","base","charAt","$queryParams","objectToMap","param","str","toString","$headers","responseInterceptor","fn","superAgentFetch","proxy","Proxy","$element","RxRestProxyHandler","plain","slice","clone","RxRest","elements","$elements","Symbol","iterator","index","done","r","one","call","all","fromObject"],"mappings":"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"}