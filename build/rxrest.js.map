{"version":3,"file":"rxrest.js","sources":["../src/RxRestProxyHandler.ts","../src/RxRestConfiguration.ts","../src/fetch.ts","../src/RxRest.ts","../src/index.ts"],"sourcesContent":["import {RxRestCollection, RxRestItem} from './index'\nimport {RxRest} from './RxRest'\n\nexport class RxRestProxyHandler<T> implements ProxyHandler<RxRest<T>> {\n  private $internal: PropertyKey[] = [];\n  private $instance: RxRestItem<T> | RxRestCollection<T>;\n\n  constructor(target: RxRestItem<T> | RxRestCollection<T>) {\n    this.$instance = target\n    do {\n      this.$internal = this.$internal.concat(\n        Object.getOwnPropertyNames(target), Object.getOwnPropertySymbols(target)\n      )\n    } while (target = Object.getPrototypeOf(target))\n  }\n\n  getPrototypeOf(target: any) {\n    return Object.getPrototypeOf(this.$instance)\n  }\n\n  defineProperty(target: any, p: PropertyKey, attributes: PropertyDescriptor): boolean {\n    if (~this.$internal.indexOf(p)) {\n      return true\n    }\n\n    Object.defineProperty(target, p, attributes)\n    return true\n  }\n\n  deleteProperty(target: any, p: PropertyKey): boolean {\n    return delete target[p]\n  }\n\n  set(target: any, p: PropertyKey, value: any, receiver: any): boolean {\n\n    if (~this.$internal.indexOf(p)) {\n      this.$instance[p] = value\n      return true\n    }\n\n    target[p] = value\n    return true\n  }\n\n  get(target: any, p: PropertyKey, receiver: any): any {\n    if (~this.$internal.indexOf(p)) {\n      return this.$instance[p]\n    }\n\n    return target[p]\n  }\n}\n","import {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor\n} from './interfaces'\nimport {RxRestItem} from './index'\n\n/**\n * RxRestConfiguration\n */\nexport class RxRestConfiguration {\n  baseURL: string\n  identifier: string = 'id'\n  requestInterceptors: RequestInterceptor[] = []\n  responseInterceptors: ResponseInterceptor[] = []\n  errorInterceptors: ErrorInterceptor[] = []\n  headers: Headers = new Headers()\n  queryParams: URLSearchParams = new URLSearchParams()\n  fetch: any\n  abortCallback: (req: Request) => void = () => null\n\n  /**\n   * requestBodyHandler\n   * JSONify the body if it's an `RxRestItem` or an `Object`\n   *\n   * @param {FormData|URLSearchParams|Body|Blob|undefined} body\n   * @returns {any}\n   */\n  requestBodyHandler(body: FormData|URLSearchParams|Body|Blob|undefined):\n    FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any> {\n    if (!body) {\n      return undefined\n    }\n\n    if (body instanceof FormData || body instanceof URLSearchParams) {\n      return body\n    }\n\n    return body instanceof RxRestItem ? body.json() : JSON.stringify(body)\n  }\n\n  /**\n   * responseBodyHandler\n   * transforms the response to a json object\n   *\n   * @param {Response} body\n   * @reject when response is an error\n   * @returns {Promise<any>}\n   */\n  responseBodyHandler(body: Response): Promise<any> {\n    return body.text()\n    .then(text => {\n      return text ? JSON.parse(text) : null\n    })\n  }\n}\n","import { RequestOptions, ErrorResponse, RequestWithHeaders } from './interfaces'\nimport superagent from 'superagent'\nimport {Stream, fromPromise} from 'most'\nimport {create} from '@most/create'\n\nexport function fetch(\n  input: string|RequestWithHeaders,\n  init?: RequestOptions,\n  abortCallback?: (req: Request) => void\n): Stream<any> {\n\n  if (!(input instanceof Request)) {\n    input = new Request(input, init) as RequestWithHeaders\n  }\n\n  let req = superagent[input.method.toLowerCase()](input.url)\n\n  for (let header of input.headers) {\n    req.set(header[0], header[1])\n  }\n\n  return fromPromise(input.text())\n  .flatMap(body => {\n    req.send(body)\n\n    return create((add, end, error) => {\n      req.end(function(err: any, res: any) {\n        if (err) {\n          let response = new Response(err, res) as ErrorResponse\n          response.message = response.statusText\n          return error(response)\n        }\n\n        if (res.noContent === true) {\n          add(new Response())\n          return end()\n        }\n\n        let response = new Response(res.text, res)\n\n        add(response)\n        end()\n      })\n\n      return function abort() {\n        req.abort()\n        abortCallback(req)\n      }\n    })\n  })\n}\n","import { RxRestConfiguration } from './RxRestConfiguration'\nimport {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor,\n  ErrorResponse\n} from './interfaces';\nimport { RxRestCollection, RxRestItem, BodyParam } from './index'\nimport { fetch as superAgentFetch } from './fetch'\nimport { Stream, throwError, of } from 'most'\nimport { create } from '@most/create'\n\nexport interface RequestBodyHandler<T> {\n  (body: BodyParam<T>): FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any>\n}\n\nexport interface ResponseBodyHandler {\n  (body: Response): Promise<any>\n}\n\nconst fromPromise = function(promise: Promise<any>) {\n  return create((add, end, error) => {\n    promise\n    .then((v) => {\n      add(v)\n      end()\n    })\n    .catch(error)\n  })\n}\n\nfunction objectToMap(map: URLSearchParams | Headers, item: any): any {\n  for (let key in item) {\n    if (Array.isArray(item[key])) {\n      for (let i = 0; i < item[key].length; i++) {\n        map.append(key, item[key][i])\n      }\n    } else {\n      map.append(key, item[key])\n    }\n  }\n\n  return map\n}\n\nconst Config = new RxRestConfiguration()\n\nexport class RxRest<T> {\n  protected $route: string[]\n  $fromServer: boolean = false\n  $queryParams: URLSearchParams = new URLSearchParams()\n  $headers: Headers = new Headers()\n\n  /**\n   * constructor\n   *\n   * @param {String} [route] the resource route\n   */\n  constructor(route?: string[]) {\n    this.$route = route === undefined ? [] : [...route]\n  }\n\n  protected addRoute(route: string): void {\n    this.$route.push.apply(this.$route, route.split('/'))\n  }\n\n  /**\n   * one\n   *\n   * @param {String} route\n   * @param {any} id\n   * @returns {RxRestItem}\n   */\n  one<T>(route: string, id?: any): RxRestItem<T> {\n    this.addRoute(route)\n    let o = {} as T\n    if (id) {\n      o[this.identifier] = id\n    }\n\n    return new RxRestItem<T>(this.$route, o)\n  }\n\n  /**\n   * all\n   *\n   * @param {String} route\n   * @returns {RxRestCollection}\n   */\n  all<T>(route: string): RxRestCollection<T> {\n    this.addRoute(route)\n    return new RxRestCollection<T>(this.$route)\n  }\n\n  /**\n   * fromObject\n   *\n   * @param {String} route\n   * @param {Object|Object[]} element\n   * @returns {RxRestItem|RxRestCollection}\n   */\n  fromObject<T>(route: string, element: T|T[]): RxRestItem<T>|RxRestCollection<T> {\n    this.addRoute(route)\n    return Array.isArray(element) ?\n      new RxRestCollection<T>(this.$route, element) : new RxRestItem<T>(this.$route, element);\n  }\n\n  /**\n   * @access private\n   * @param {BodyParam} body\n   * @return {BodyParam|RxRestItem}\n   */\n  protected withBody(body: BodyParam<T>) {\n    return body ? body : this\n  }\n\n  /**\n   * post\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  post(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('POST', this.withBody(body))\n  }\n\n  /**\n   * remove\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  remove(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('DELETE')\n  }\n\n  /**\n   * get\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  get(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * put\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  put(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('PUT', this.withBody(body))\n  }\n\n  /**\n   * patch\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  patch(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('PATCH', this.withBody(body))\n  }\n\n  /**\n   * head\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  head(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('HEAD')\n  }\n\n  /**\n   * trace\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  trace(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('TRACE')\n  }\n\n  /**\n   * options\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  options(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('OPTIONS')\n  }\n\n  /**\n   * URL\n   *\n   * @returns {string}\n   */\n  get URL(): string {\n    return `${Config.baseURL}${this.$route.join('/')}`\n  }\n\n  /**\n   * set baseURL\n   *\n   * @param {String} base\n   * @returns\n   */\n  set baseURL(base: string) {\n    if (base.charAt(base.length - 1) !== '/') {\n      base += '/'\n    }\n\n    Config.baseURL = base\n  }\n\n  /**\n   * get baseURL\n   *\n   * @returns {string}\n   */\n  get baseURL(): string {\n    return Config.baseURL\n  }\n\n  /**\n   * Set identifier key\n   *\n   * @param {String} id\n   */\n  set identifier(id: string) {\n    Config.identifier = id\n  }\n\n  /**\n   * Get identifier key\n   */\n  get identifier(): string {\n    return Config.identifier\n  }\n\n  /**\n   * set local query params\n   * @param {Object|URLSearchParams} params\n   */\n  set localQueryParams(params: any) {\n    if (!params) {\n      return\n    }\n\n    if (params instanceof URLSearchParams) {\n      this.$queryParams = params\n      return\n    }\n\n    this.$queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Sets local query params useful to add params to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setQueryParams(params: any): RxRest<T> {\n    this.localQueryParams = params\n    return this\n  }\n\n  /**\n   * Sets local headers useful to add headers to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setHeaders(params: any): RxRest<T> {\n    this.localHeaders = params\n    return this\n  }\n\n  /**\n   * Get local query params\n   * @return URLSearchParams\n   */\n  get localQueryParams(): any {\n    return this.$queryParams\n  }\n\n  /**\n   * Set global query params\n   * @param {Object|URLSearchParams} params\n   */\n  set queryParams(params: any) {\n    if (params instanceof URLSearchParams) {\n      Config.queryParams = params\n      return\n    }\n\n    if (typeof params === 'string') {\n      Config.queryParams = new URLSearchParams(params)\n      return\n    }\n\n    Config.queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Get global query params\n   * @return {URLSearchParams}\n   */\n  get queryParams(): any {\n    return Config.queryParams\n  }\n\n  /**\n   * Get request query params\n   * Combine local and global query params\n   * Local query params are overriding global params\n   * @return {String}\n   */\n  get requestQueryParams(): string {\n    let params = new URLSearchParams()\n\n    for (let param of this.queryParams) {\n      params.append(param[0], param[1])\n    }\n\n    for (let param of this.localQueryParams) {\n      params.append(param[0], param[1])\n    }\n\n    let str = params.toString()\n\n    if (str.length) {\n      return '?' + str\n    }\n\n    return ''\n  }\n\n  /**\n   * Set local headers\n   * @param {Object|Headers} params\n   */\n  set localHeaders(params: any) {\n    if (!params) {\n      return\n    }\n\n     if (params instanceof Headers) {\n      this.$headers = params\n      return\n    }\n\n    this.$headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get local headers\n   * @return Headers\n   */\n  get localHeaders(): any {\n    return this.$headers\n  }\n\n  /**\n   * set global headers\n   * @param {Object|Headers} params\n   */\n  set headers(params: any) {\n     if (params instanceof Headers) {\n      Config.headers = params\n      return\n    }\n\n    Config.headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get global headers\n   * @return Headers\n   */\n  get headers(): any {\n    return Config.headers\n  }\n\n  /**\n   * get request Headers\n   * Combine local and global headers\n   * Local headers are overriding global headers\n   *\n   * @returns {Headers}\n   */\n  get requestHeaders(): Headers {\n    let headers = new Headers()\n\n    for (let header of this.headers) {\n      headers.append(header[0], header[1])\n    }\n\n    for (let header of this.localHeaders) {\n      headers.append(header[0], header[1])\n    }\n\n    return headers\n  }\n\n  /**\n   * get requestInterceptors\n   *\n   * @returns {RequestInterceptor[]}\n   */\n  get requestInterceptors(): RequestInterceptor[] {\n    return Config.requestInterceptors\n  }\n\n  /**\n   * set requestInterceptors\n   *\n   * @param {RequestInterceptor[]} requestInterceptors\n   */\n  set requestInterceptors(requestInterceptors: RequestInterceptor[]) {\n    Config.requestInterceptors = requestInterceptors\n  }\n\n  /**\n   * get responseInterceptors\n   *\n   * @returns {ResponseInterceptor[]}\n   */\n  get responseInterceptors(): ResponseInterceptor[] {\n    return Config.responseInterceptors\n  }\n\n  /**\n   * set responseInterceptors\n   *\n   * @param {ResponseInterceptor[]} responseInterceptor\n   */\n  set responseInterceptors(responseInterceptor: ResponseInterceptor[]) {\n    Config.responseInterceptors = responseInterceptor\n  }\n\n  /**\n   * get errorInterceptors\n   *\n   * @returns {ErrorInterceptor[]}\n   */\n  get errorInterceptors(): ErrorInterceptor[] {\n    return Config.errorInterceptors\n  }\n\n  /**\n   * set errorInterceptors\n   *\n   * @param {ErrorInterceptor[]} errorInterceptors\n   */\n  set errorInterceptors(errorInterceptors: ErrorInterceptor[]) {\n    Config.errorInterceptors = errorInterceptors\n  }\n\n  /**\n   * set requestBodyHandler\n   *\n   * @param {Function} fn\n   */\n  set requestBodyHandler(fn: RequestBodyHandler<T>) {\n    Config.requestBodyHandler = fn\n  }\n\n  /**\n   * requestBodyHandler\n   *\n   * @returns {Function}\n   */\n  get requestBodyHandler(): RequestBodyHandler<T> {\n    return Config.requestBodyHandler\n  }\n\n  /**\n   * set responseBodyHandler\n   * @param {ResponseBodyHandler} fn\n   */\n  set responseBodyHandler(fn: ResponseBodyHandler) {\n    Config.responseBodyHandler = fn\n  }\n\n  /**\n   * get responseBodyHandler\n   *\n   * @returns {ResponseBodyHandler}\n   */\n  get responseBodyHandler(): ResponseBodyHandler {\n    return Config.responseBodyHandler\n  }\n\n  /**\n   * @param fn the callback that will be called on request abortion\n   */\n  set abortCallback(fn: (req: Request) => void) {\n    Config.abortCallback = fn\n  }\n\n  /**\n   * @return fn the current cancel callback\n   */\n  get abortCallback(): (req: Request) => void {\n    return Config.abortCallback\n  }\n\n  get fetch(): any {\n    return Config.fetch ? Config.fetch : superAgentFetch\n  }\n\n  set fetch(fn: any) {\n    Config.fetch = fn\n  }\n\n  /**\n   * expandInterceptors\n   *\n   * @param {RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]} interceptors\n   * @returns {Stream<any>} fn\n   */\n  private expandInterceptors(\n    interceptors: RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]\n  ) {\n    return function(origin: any): Stream<any> {\n      return (<any>interceptors).reduce(\n        (obs: Stream<any>, interceptor: any) =>\n          obs.concatMap(value => {\n            let result = interceptor(value)\n            if (result === undefined) {\n              return of(value)\n            }\n\n            if (result instanceof Promise) {\n              return fromPromise(result)\n            }\n\n            if (result instanceof Stream) {\n              return result\n            }\n\n            return of(result)\n          }),\n        of(origin)\n      )\n    }\n  }\n\n  /**\n   * request\n   *\n   * @param {string} method\n   * @param {RxRestItem|FormData|URLSearchParams|Body|Blob|undefined|Object} [body]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  request(method: string, body?: BodyParam<T>): Stream<RxRestItem<T> & T> {\n    let requestOptions = {\n      method: method,\n      headers: <Headers> this.requestHeaders,\n      body: this.requestBodyHandler(body)\n    }\n\n    let request = new Request(this.URL + this.requestQueryParams, requestOptions);\n\n    let stream = <Stream<RxRestItem<T> & T>> of(request)\n    .flatMap(this.expandInterceptors(Config.requestInterceptors))\n    .flatMap(request => this.fetch(request, null, this.abortCallback))\n    .flatMap(this.expandInterceptors(Config.responseInterceptors))\n    .flatMap(body => fromPromise(this.responseBodyHandler(body)))\n    .flatMap(body => {\n      if (!Array.isArray(body)) {\n        let item: RxRestItem<T>\n        if (this instanceof RxRestItem) {\n          item = this\n          item.element = body as T\n        } else {\n          item = new RxRestItem(this.$route, body as T)\n        }\n\n        item.$fromServer = true\n        return create((add, end, error) => {\n          add(item)\n          end(item)\n        })\n      }\n\n      let collection = new RxRestCollection<T>(this.$route, body.map((e: T) => {\n        let item = new RxRestItem(this.$route, e)\n        item.$fromServer = true\n        return item\n      }))\n\n      return create((add, end, error) => {\n        for (let item of collection) {\n          add(item)\n        }\n\n        end(collection)\n      })\n    })\n    .recoverWith(body => {\n      return of(body)\n      .flatMap(this.expandInterceptors(Config.errorInterceptors))\n      .flatMap((body: ErrorResponse) => throwError(body))\n    })\n\n    return stream\n  }\n}\n","import { Stream } from 'most'\nimport { RxRestProxyHandler } from './RxRestProxyHandler'\nimport { RxRest } from './RxRest'\n\nexport type BodyParam<T> = RxRestItem<T>|FormData|URLSearchParams|Body|Blob|undefined|Object;\n\nexport class RxRestItem<T> extends RxRest<T> {\n  $element: T = {} as T;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T} [element]\n   * @return {Proxy}\n   */\n  constructor(route: string[], element?: T) {\n    super(route)\n\n    if (element !== undefined) {\n      this.element = element\n    }\n\n    const proxy = new Proxy(this.$element, new RxRestProxyHandler<T>(this))\n\n    return <RxRestItem<T> & T> proxy\n  }\n\n  /**\n   * save - POST or PUT according to $fromServer value\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  save(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request(this.$fromServer === true ? 'PUT' : 'POST', this)\n  }\n\n  /**\n   * set element\n   *\n   * @param {T} element\n   */\n  set element(element: T) {\n    for (let i in element) {\n      if (i === this.identifier && !this.$element[this.identifier]) {\n        this.$route.push('' + element[i])\n      }\n\n      this.$element[i] = element[i]\n    }\n  }\n\n  /**\n   * get element\n   *\n   * @return {T}\n   */\n  get element(): T {\n    return this.$element\n  }\n\n  /**\n   * get plain object\n   *\n   * @return {T}\n   */\n  plain(): T {\n    return this.element\n  }\n\n  /**\n   * Get json string\n   * @return {string}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * Clone\n   * @return {RxRestItem<T>}\n   */\n  clone(): RxRestItem<T> {\n    let route = this.$route\n\n    if (this.$element[this.identifier]) {\n      route = route.slice(0, this.$route.length - 1)\n    }\n\n    let clone = new RxRestItem(route, this.$element)\n    clone.$fromServer = this.$fromServer\n    return clone\n  }\n}\n\nexport class RxRestCollection<T> extends RxRest<T>\n  implements Iterable<RxRestItem<T>>, RxRestCollection<T> {\n  length: number;\n  $elements: RxRestItem<T>[] = [];\n  [index: number]: RxRestItem<T>;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T[]|RxRestItem<T>[]]} [elements]\n   * @return {Proxy}\n   */\n  constructor(route: string[], elements?: T[]|RxRestItem<T>[]) {\n    super(route)\n    if (elements !== undefined) {\n      this.elements = (elements as any).map((e: any) =>\n        e instanceof RxRestItem ? e.clone() : new RxRestItem(this.$route, e)\n      )\n    }\n\n    const proxy = new Proxy(this.$elements, new RxRestProxyHandler<T>(this))\n\n    return <RxRestCollection<T> & T> proxy\n  }\n\n  [Symbol.iterator]() {\n    let index = 0\n    let elements = this.$elements\n\n    return {\n      next(): IteratorResult<RxRestItem<T>> {\n        return index < elements.length ?\n          {value: elements[index++], done: false} : {value: undefined, done: true}\n      }\n    }\n  }\n\n  /**\n   * getList - fetch a collection\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Stream<RxRestItem|RxRestCollection>}\n   */\n  getList(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Stream<RxRestItem<T>|RxRestCollection<T>> {\n    this.localQueryParams = queryParams\n    this.localHeaders = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * set elements\n   *\n   * @param {T[]} elements\n   */\n  set elements(elements: RxRestItem<T>[]) {\n    this.$elements = elements\n    this.length = elements.length\n  }\n\n  /**\n   * get elements\n   * @return {RxRestItem<T>[]}\n   */\n  get elements(): RxRestItem<T>[] {\n    return this.$elements\n  }\n\n  /**\n   * plain\n   *\n   * @returns {T[]}\n   */\n  plain(): T[] {\n    return this.elements.map(e => e.plain())\n  }\n\n  /**\n   * json\n   *\n   * @returns {String}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * clone\n   *\n   * @returns {RxRestCollection}\n   */\n  clone(): RxRestCollection<T> {\n    return new RxRestCollection<T>(this.$route, this.$elements)\n  }\n}\n\nexport class NewRxRest {\n  one<T>(route: string, id?: any): RxRestItem<T> {\n    let r = new RxRest()\n    return r.one.call(r, route, id)\n  }\n\n  all<T>(route: string): RxRestCollection<T> {\n    let r = new RxRest()\n    return r.all.call(r, route)\n  }\n\n  fromObject<T>(route: string, element: T|T[]): RxRestItem<T>|RxRestCollection<T> {\n    let r = new RxRest()\n    return r.fromObject.call(r, route, element)\n  }\n}\n\nexport {RxRest}\n"],"names":["fromPromise","create","superAgentFetch","of","Stream","throwError","RxRest"],"mappings":"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"}