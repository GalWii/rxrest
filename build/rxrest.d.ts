// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../most

import { Stream } from 'most';

export class RxRestItem<T> extends AbstractRxRest<RxRestItem<T> & T, T> {
        $element: T;
        /**
            * constructor
            *
            * @param {string[]} route
            * @param {T} [element]
            * @return {Proxy}
            */
        constructor(route: string[], element?: T, config?: RxRestConfiguration, metadata?: any);
        /**
            * save - POST or PUT according to $fromServer value
            *
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        save(queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<RxRestItem<T> | RxRestCollection<T>>;
        /**
            * set element
            *
            * @param {T} element
            */
        element: T;
        /**
            * get plain object
            *
            * @return {T}
            */
        plain(): T;
        /**
            * Get json string
            * @return {string}
            */
        json(): string;
        /**
            * Clone
            * @return {RxRestItem<T>}
            */
        clone(): RxRestItem<T>;
}
export class RxRestCollection<T> extends AbstractRxRest<RxRestCollection<T> & T[] & T, T> implements Iterable<RxRestItem<T>> {
        length: number;
        $elements: RxRestItem<T>[];
        [index: number]: RxRestItem<T>;
        /**
            * constructor
            *
            * @param {string[]} route
            * @param {T[]|RxRestItem<T>[]]} [elements]
            * @return {Proxy}
            */
        constructor(route: string[], elements?: T[] | RxRestItem<T>[], config?: RxRestConfiguration, metadata?: any, asIterable?: boolean);
        [Symbol.iterator](): {
                next(): IteratorResult<RxRestItem<T>>;
        };
        /**
            * getList - fetch a collection
            *
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        getList(queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<RxRestItem<T> | RxRestCollection<T>>;
        /**
            * set elements
            *
            * @param {T[]} elements
            */
        elements: RxRestItem<T>[];
        /**
            * plain
            *
            * @returns {T[]}
            */
        plain(): T[];
        /**
            * json
            *
            * @returns {String}
            */
        json(): string;
        /**
            * clone
            *
            * @returns {RxRestCollection}
            */
        clone(): RxRestCollection<T>;
}
export class RxRest {
        constructor(config: RxRestConfiguration);
        one<T>(route: string, id?: any): RxRestItem<T>;
        all<T>(route: string, asIterable?: boolean): RxRestCollection<T>;
        fromObject<T>(route: string, element: T | T[]): RxRestItem<T> | RxRestCollection<T>;
}
export { RxRestConfiguration };

export class RxRest<F, T> {
        protected $route: string[];
        $fromServer: boolean;
        $asIterable: boolean;
        $queryParams: URLSearchParams;
        $headers: Headers;
        config: RxRestConfiguration;
        $metadata: any;
        /**
            * constructor
            *
            * @param {String} [route] the resource route
            */
        constructor(config?: RxRestConfiguration, route?: string[], metadata?: any);
        protected addRoute(route: string): void;
        /**
            * one
            *
            * @param {String} route
            * @param {any} id
            * @returns {RxRestItem}
            */
        one<T>(route: string, id?: any): RxRestItem<T>;
        /**
            * all
            *
            * @param {String} route
            * @param {boolean} asIterable - forces the next request to return an Observable<Array>
            *                               instead of emitting multiple events
            * @returns {RxRestCollection}
            */
        all<T>(route: string, asIterable?: boolean): RxRestCollection<T>;
        /**
            * asIterable - forces the next request to return an Observable<Array>
            * instead of emitting multiple events
            *
            * @returns {self}
            */
        asIterable(): this;
        /**
            * fromObject
            *
            * @param {String} route
            * @param {Object|Object[]} element
            * @returns {RxRestItem|RxRestCollection}
            */
        fromObject<T>(route: string, element: T | T[]): RxRestItem<T> | RxRestCollection<T>;
        /**
            * @access private
            * @param {BodyParam} body
            * @return {BodyParam|RxRestItem}
            */
        protected withBody(body: BodyParam<any>): BodyParam<any>;
        /**
            * post
            *
            * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        post(body?: BodyParam<any>, queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * remove
            *
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        remove(queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * get
            *
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        get(queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * put
            *
            * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        put(body?: BodyParam<any>, queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * patch
            *
            * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        patch(body?: BodyParam<any>, queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * head
            *
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        head(queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * trace
            *
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        trace(queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * options
            *
            * @param {Object|URLSearchParams} [queryParams]
            * @param {Object|Headers} [headers]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        options(queryParams?: Object | URLSearchParams, headers?: Object | Headers): Stream<F>;
        /**
            * URL
            *
            * @returns {string}
            */
        readonly URL: string;
        /**
            * set local query params
            * @param {Object|URLSearchParams} params
            */
        queryParams: any;
        /**
            * Sets local query params useful to add params to a custom request
            * @param {Object|URLSearchParams}
            * @return this
            */
        setQueryParams(params: any): this;
        /**
            * Sets local headers useful to add headers to a custom request
            * @param {Object|URLSearchParams}
            * @return this
            */
        setHeaders(params: any): this;
        /**
            * Get request query params
            * Combine local and global query params
            * Local query params are overriding global params
            * @return {String}
            */
        readonly requestQueryParams: string;
        /**
            * Set local headers
            * @param {Object|Headers} params
            */
        headers: any;
        /**
            * get request Headers
            * Combine local and global headers
            * Local headers are overriding global headers
            *
            * @returns {Headers}
            */
        readonly requestHeaders: Headers;
        /**
            * request
            *
            * @param {string} method
            * @param {RxRestItem|FormData|URLSearchParams|Body|Blob|undefined|Object} [body]
            * @returns {Stream<RxRestItem|RxRestCollection>}
            */
        request(method: string, body?: BodyParam<any>): Stream<F>;
}

export interface RequestBodyHandler<T> {
        (body: BodyParam<T>): FormData | URLSearchParams | Body | Blob | undefined | string | Promise<any>;
}
export interface ResponseBodyHandler {
        (body: Response): Promise<any>;
}
/**
    * RxRestConfiguration
    */
export class RxRestConfiguration {
        identifier: string;
        requestInterceptors: RequestInterceptor[];
        responseInterceptors: ResponseInterceptor[];
        errorInterceptors: ErrorInterceptor[];
        fetch: any;
        abortCallback: (req: Request) => void;
        constructor();
        /**
            * requestBodyHandler
            * JSONify the body if it's an `RxRestItem` or an `Object`
            *
            * @param {FormData|URLSearchParams|Body|Blob|undefined} body
            * @returns {any}
            */
        _requestBodyHandler(body: FormData | URLSearchParams | Body | Blob | undefined): FormData | URLSearchParams | Body | Blob | undefined | string | Promise<any>;
        /**
            * responseBodyHandler
            * transforms the response to a json object
            *
            * @param {Response} body
            * @reject when response is an error
            * @returns {Promise<any>}
            */
        _responseBodyHandler(body: Response): Promise<{
                body: any;
                metadata: any;
        }>;
        responseBodyHandler: ResponseBodyHandler;
        requestBodyHandler: RequestBodyHandler<any>;
        /**
            * set baseURL
            *
            * @param {String} base
            * @returns
            */
        baseURL: string;
        /**
            * Set global query params
            * @param {Object|URLSearchParams} params
            */
        queryParams: any;
        /**
            * set global headers
            * @param {Object|Headers} params
            */
        headers: any;
}

import { Stream } from 'most'
import { RxRestItem } from './index'

export type BodyParam<T> = RxRestItem<T>|FormData|URLSearchParams|Body|Blob|undefined|Object;

export interface RequestInterceptor {
    (request: Request): Stream<Request>|Promise<Request>|undefined|Request|void;
}

export interface ResponseInterceptor {
    (body: Body): Stream<Body|Object|undefined>|Promise<Body|Object|undefined>|undefined|Body|void;
}

export interface ErrorInterceptor {
    (response: Response): Stream<Response>|void|Response|Promise<Response>;
}

export interface ErrorResponse extends Response {
    name: string;
    message: string;
}

